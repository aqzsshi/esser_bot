const fs = require('fs');
const path = require('path');
const { Collection } = require('discord.js');

function loadCommands(client) {
  client.commands = new Collection();
  const commandFiles = fs.readdirSync(path.join(__dirname, 'handlers'))
    .filter(file => file.endsWith('Command.js') || file.endsWith('Handler.js'));

  for (const file of commandFiles) {
    const commandPath = path.join(__dirname, 'handlers', file);
    const commandModule = require(commandPath);
    if (Array.isArray(commandModule.commands)) {
      for (const cmd of commandModule.commands) {
        if (cmd?.data && typeof cmd.execute === 'function') {
          client.commands.set(cmd.data.name, cmd);
        }
      }
    } else if (commandModule.data && typeof commandModule.execute === 'function') {
      client.commands.set(commandModule.data.name, commandModule);
    }
  }
}

async function registerCommands(client) {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    const commandsData = Array.from(client.commands.values()).map(cmd => cmd.data);
    await client.application.commands.set(commandsData);
    console.log('‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!');
    console.log(`üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${commandsData.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    console.log('üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    commandsData.forEach(cmd => {
      console.log(`  ‚Ä¢ /${cmd.name} - ${cmd.description}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    
    // –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    const fallbackGuildId = process.env.FALLBACK_GUILD_ID;
    if (fallbackGuildId) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (fallback):', fallbackGuildId);
      const guild = client.guilds.cache.get(fallbackGuildId);
      if (guild) {
        try {
          const commandsData = Array.from(client.commands.values()).map(cmd => cmd.data);
          await guild.commands.set(commandsData);
          console.log('‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (fallback)!');
        } catch (guildError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (fallback):', guildError);
        }
      } else {
        console.warn('‚ö†Ô∏è Fallback guild –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ.');
      }
    }
  }
}

function handleInteractions(client) {
  client.on('interactionCreate', async (interaction) => {
      // ===== Slash-–∫–æ–º–∞–Ω–¥—ã =====
      if (interaction.isChatInputCommand()) {
          // –ó–∞–ø—Ä–µ—Ç –Ω–∞ –õ–°, –∫—Ä–æ–º–µ /–∫–ª—É–±—ã
          if (interaction.channel && interaction.channel.type === 1 && interaction.commandName !== '–∫–ª—É–±—ã') {
              await interaction.reply({
                  content: '‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω–µ–ª—å–∑—è –≤—ã–∑—ã–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞.',
                  ephemeral: true
              });
              return;
          }

          const command = client.commands.get(interaction.commandName);
          if (!command) return;

          try {
              await command.execute(interaction, client);
          } catch (error) {
              console.error(error);
              if (!interaction.replied) {
                  await interaction.reply({ content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
              }
          }
          return;
      }

      // ===== –ö–Ω–æ–ø–∫–∏, —Å–µ–ª–µ–∫—Ç—ã, –º–æ–¥–∞–ª–∫–∏ =====
      if (interaction.isButton() || interaction.isModalSubmit() || interaction.isStringSelectMenu() || interaction.isRoleSelectMenu() || interaction.isUserSelectMenu()) {
          let handled = false;

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
          for (const cmd of client.commands.values()) {
              // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ / —Å–µ–ª–µ–∫—Ç–æ–≤ / –º–æ–¥–∞–ª–æ–∫ –≤ handleComponent
              if (typeof cmd.handleComponent === 'function' && (interaction.isButton() || interaction.isStringSelectMenu() || interaction.isRoleSelectMenu() || interaction.isUserSelectMenu())) {
                  try {
                      const wasHandled = await cmd.handleComponent(interaction, client);
                      if (wasHandled) {
                          handled = true;
                          break;
                      }
                  } catch (err) {
                      console.error(`–û—à–∏–±–∫–∞ –≤ handleComponent –∫–æ–º–∞–Ω–¥—ã ${cmd.data?.name}:`, err);
                  }
              }

              if (interaction.isModalSubmit() && typeof cmd.handleModal === 'function') {
                  try {
                      const wasHandled = await cmd.handleModal(interaction, client);
                      if (wasHandled) {
                          handled = true;
                          break;
                      }
                  } catch (err) {
                      console.error(`–û—à–∏–±–∫–∞ –≤ handleModal –∫–æ–º–∞–Ω–¥—ã ${cmd.data?.name}:`, err);
                  }
              }

              if ((interaction.isStringSelectMenu() || interaction.isRoleSelectMenu() || interaction.isUserSelectMenu()) && typeof cmd.handleSelect === 'function') {
                  try {
                      const wasHandled = await cmd.handleSelect(interaction, client);
                      if (wasHandled) {
                          handled = true;
                          break;
                      }
                  } catch (err) {
                      console.error(`–û—à–∏–±–∫–∞ –≤ handleSelect –∫–æ–º–∞–Ω–¥—ã ${cmd.data?.name}:`, err);
                  }
              }
          }

          // –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ–±—É–µ–º skillsHandler
          if (!handled) {
              try {
                  const { handleComponent } = require('./handlers/skillsHandler'); // –ø—É—Ç—å –ø—Ä–æ–≤–µ—Ä—å!
                  const wasHandled = await handleComponent(interaction, client);
                  if (wasHandled) handled = true;
              } catch (e) {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ skillsHandler:', e);
              }
          }
      }
  });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
async function clearAllCommands(client) {
  try {
    await client.application.commands.set([]);
    console.log('üóëÔ∏è –í—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—â–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–∞–Ω–¥:', error);
  }
}

module.exports = { loadCommands, registerCommands, handleInteractions, clearAllCommands }; 