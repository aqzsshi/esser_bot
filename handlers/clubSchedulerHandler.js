const { EmbedBuilder } = require('discord.js');
const moment = require('moment-timezone');
const fs = require('fs');
const path = require('path');

const sentMessages = [];

function getAllGuildSchedules() {
  const configPath = path.join(__dirname, 'serverConfigs.json');
  try {
    if (!fs.existsSync(configPath)) return {};
    const serverConfigs = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    const result = {};
    for (const [guildId, cfg] of Object.entries(serverConfigs)) {
      if (cfg && Array.isArray(cfg.clubSchedules)) {
        result[guildId] = cfg.clubSchedules;
      }
    }
    return result;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è serverConfigs.json (club schedules):', e);
    return {};
  }
}

function initClubScheduler(client) {
  setInterval(async () => {
    const now = moment().tz('Europe/Moscow');
    const currentTime = now.format('HH:mm');

    const all = getAllGuildSchedules();

    for (const [guildId, schedules] of Object.entries(all)) {
      for (const club of schedules) {
        for (const meetingTime of club.times) {
          const meetingMoment = moment.tz(meetingTime, 'HH:mm', 'Europe/Moscow');
          const diff = meetingMoment.diff(now, 'minutes');

          let messageType = '';
          if (diff === 10) {
            messageType = 'reminder';
          } else if (meetingTime === currentTime) {
            messageType = 'start';
          } else {
            continue;
          }

          const alreadySent = sentMessages.some(
            msg => msg.guildId === guildId && msg.channelId === club.channelId && msg.time === meetingTime && msg.type === messageType
          );
          if (alreadySent) continue;

          try {
            const channel = await client.channels.fetch(club.channelId);
            if (!channel || !channel.isTextBased()) continue;

            const embed = new EmbedBuilder()
              .setTitle(`–ú–∏—Ç–∏–Ω–≥ –∫–ª—É–±–∞ ${club.name}`)
              .setDescription(
                messageType === 'reminder'
                  ? `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ **10 –º–∏–Ω—É—Ç** –Ω–∞—á–Ω–µ—Ç—Å—è –º–∏—Ç–∏–Ω–≥ –∫–ª—É–±–∞ **${club.name}**. –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å!`
                  : `‚úÖ –ú–∏—Ç–∏–Ω–≥ –∫–ª—É–±–∞ **${club.name}** –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`
              )
              .setColor('#1D1D1E')
              .setImage(club.image)
              .setTimestamp();

            const message = await channel.send({
              content: club.roleId ? `<@&${club.roleId}>` : null,
              embeds: [embed],
            });

            sentMessages.push({
              messageId: message.id,
              guildId,
              channelId: club.channelId,
              time: meetingTime,
              type: messageType,
              sentAt: Date.now(),
            });
          } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∏—Ç–∏–Ω–≥–∞ –¥–ª—è ${club.name} (${guildId}):`, err);
          }
        }
      }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 55 –º–∏–Ω—É—Ç)
    for (const msg of [...sentMessages]) {
      const age = Date.now() - msg.sentAt;
      if (age > 55 * 60 * 1000) {
        try {
          const channel = await client.channels.fetch(msg.channelId);
          const m = await channel.messages.fetch(msg.messageId);
          await m.delete();
        } catch (err) {
          // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        } finally {
          const idx = sentMessages.indexOf(msg);
          if (idx >= 0) sentMessages.splice(idx, 1);
        }
      }
    }
  }, 60 * 1000);
}

// ===== Slash-–∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∫–ª—É–±–æ–≤ =====
const data = {
  name: '–∫–ª—É–±—ã_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
  description: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∏—Ç–∏–Ω–≥–∞—Ö –∫–ª—É–±–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)',
  options: [
    { name: '—Ç–∏–ø', description: '–¢–∏–ø –∫–ª—É–±–∞ (—Ä–µ–¥–Ω–µ–∫–∏/–±–∞–π–∫–µ—Ä—ã)', type: 3, required: true },
    { name: '–∫–∞–Ω–∞–ª', description: 'ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', type: 3, required: true },
    { name: '—Ä–æ–ª—å', description: 'ID —Ä–æ–ª–∏ –¥–ª—è —Ç–µ–≥–∞', type: 3, required: true },
    { name: '–≤—Ä–µ–º—è', description: '–í—Ä–µ–º—è –º–∏—Ç–∏–Ω–≥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä. 07:50, 10:50, 13:50)', type: 3, required: true },
    { name: '—Ñ–æ—Ç–æ', description: '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ (–±–∞–Ω–Ω–µ—Ä)', type: 3, required: true }
  ]
};

function parseTimes(input) {
  return input.split(',').map(t => t.trim()).filter(Boolean).filter(t => /^\d{2}:\d{2}$/.test(t));
}

async function executeSetup(interaction, client) {
  if (!interaction.member.permissions.has('Administrator')) {
    return interaction.reply({ content: '‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', ephemeral: true });
  }

  const typeRaw = interaction.options.getString('—Ç–∏–ø').toLowerCase();
  const channelId = interaction.options.getString('–∫–∞–Ω–∞–ª');
  const roleId = interaction.options.getString('—Ä–æ–ª—å');
  const timesRaw = interaction.options.getString('–≤—Ä–µ–º—è');
  const imageUrl = interaction.options.getString('—Ñ–æ—Ç–æ');

  if (!channelId.match(/^\d+$/)) return interaction.reply({ content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞.', ephemeral: true });
  if (!roleId.match(/^\d+$/)) return interaction.reply({ content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ä–æ–ª–∏.', ephemeral: true });
  if (!/^https?:\/\/.+\.(png|jpg|jpeg|gif|webp)$/i.test(imageUrl)) return interaction.reply({ content: '‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (png/jpg/jpeg/gif/webp).', ephemeral: true });

  try {
    const ch = await interaction.guild.channels.fetch(channelId);
    if (!ch) return interaction.reply({ content: '‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true });
  } catch { return interaction.reply({ content: '‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.', ephemeral: true }); }
  try {
    const role = await interaction.guild.roles.fetch(roleId);
    if (!role) return interaction.reply({ content: '‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral: true });
  } catch { return interaction.reply({ content: '‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral: true }); }

  const times = parseTimes(timesRaw);
  if (times.length === 0) return interaction.reply({ content: '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.', ephemeral: true });

  let clubId = null;
  let clubName = null;
  if (['—Ä–µ–¥–Ω–µ–∫–∏', 'rednecks'].includes(typeRaw)) { clubId = 'rednecks'; clubName = '–†–µ–¥–Ω–µ–∫–∏'; }
  else if (['–±–∞–π–∫–µ—Ä—ã', 'bikers'].includes(typeRaw)) { clubId = 'bikers'; clubName = '–ë–∞–π–∫–µ—Ä—ã'; }
  else return interaction.reply({ content: '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–ª—É–±–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–µ–¥–Ω–µ–∫–∏ –∏–ª–∏ –±–∞–π–∫–µ—Ä—ã.', ephemeral: true });

  const configPath = path.join(__dirname, 'serverConfigs.json');
  let serverConfigs = {};
  try {
    if (fs.existsSync(configPath)) serverConfigs = JSON.parse(fs.readFileSync(configPath, 'utf8'));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è serverConfigs.json:', e);
  }

  const guildId = interaction.guild.id;
  const current = serverConfigs[guildId]?.clubSchedules || [];
  const updated = [...current];
  const idx = updated.findIndex(c => c.clubId === clubId);
  const newEntry = { clubId, name: clubName, channelId, roleId, times, image: imageUrl };
  if (idx >= 0) updated[idx] = newEntry; else updated.push(newEntry);

  serverConfigs[guildId] = { ...serverConfigs[guildId], clubSchedules: updated };

  try {
    fs.writeFileSync(configPath, JSON.stringify(serverConfigs, null, 2), 'utf8');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ serverConfigs.json:', e);
    return interaction.reply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', ephemeral: true });
  }

  const embed = new EmbedBuilder()
    .setTitle('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª—É–±–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
    .setColor('#00FF00')
    .addFields(
      { name: '–ö–ª—É–±', value: clubName, inline: true },
      { name: '–ö–∞–Ω–∞–ª', value: `<#${channelId}>`, inline: true },
      { name: '–†–æ–ª—å', value: `<@&${roleId}>`, inline: true },
      { name: '–í—Ä–µ–º—è', value: times.join(', '), inline: false },
      { name: '–§–æ—Ç–æ', value: imageUrl, inline: false }
    )
    .setFooter({ text: `–ù–∞—Å—Ç—Ä–æ–∏–ª: ${interaction.user.tag}` })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

// Export as function with attached commands property
initClubScheduler.commands = [ { data, execute: executeSetup } ];

module.exports = initClubScheduler;