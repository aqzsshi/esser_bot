const { EmbedBuilder } = require('discord.js');
const os = require('os');
const ms = require('ms');
const { images } = require('../config.json');

// ===== Embed Command =====
const embedData = {
  name: '–µ–º–±–µ–¥',
  description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å embed-—Å–æ–æ–±—â–µ–Ω–∏–µ',
  options: [
    { name: '–∑–∞–≥–æ–ª–æ–≤–æ–∫', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ embed', type: 3, required: true },
    { name: '–æ–ø–∏—Å–∞–Ω–∏–µ', description: '–û–ø–∏—Å–∞–Ω–∏–µ embed', type: 3, required: true },
    { name: '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', description: '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', type: 3, required: false },
  ],
};

async function executeEmbed(interaction, client) {
  const title = interaction.options.getString('–∑–∞–≥–æ–ª–æ–≤–æ–∫');
  const description = interaction.options.getString('–æ–ø–∏—Å–∞–Ω–∏–µ');
  const image = interaction.options.getString('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');

  const embed = new EmbedBuilder()
    .setTitle(title)
    .setDescription(description)
    .setColor('#333333')
    .setFooter({ text: `–û—Ç–ø—Ä–∞–≤–∏–ª: ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() });

  if (image) embed.setImage(image);

  await interaction.channel.send({ embeds: [embed] });
  await interaction.reply({ content: '‚úÖ Embed –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', ephemeral: true });
}

// ===== Status Command =====
const statusData = {
  name: '—Å—Ç–∞—Ç—É—Å',
  description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞',
};

async function executeStatus(interaction, client) {
  const totalMemMB = (os.totalmem() / 1024 / 1024).toFixed(2);
  const freeMemMB = (os.freemem() / 1024 / 1024).toFixed(2);
  const usedMemMB = (totalMemMB - freeMemMB).toFixed(2);
  const memoryUsage = ((usedMemMB / totalMemMB) * 100).toFixed(2);
  const cpuLoad = (os.loadavg()[0] * 100 / os.cpus().length).toFixed(2);
  const botUptime = formatUptime(process.uptime());
  const ping = Math.round(client.ws.ping);

  const statusEmbed = new EmbedBuilder()
    .setTitle('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ <:logolight:1366047161451544626> ')
    .setColor('#1D1D1E')
    .addFields(
      { name: '<:ping_emoji:1366068173127942146> –ü–∏–Ω–≥ –±–æ—Ç–∞:', value: `\`${ping} –º—Å\``, inline: true },
      { name: '<a:network_emoji:1366067102938566750> –ê–ø—Ç–∞–π–º –±–æ—Ç–∞:', value: `\`${botUptime}\``, inline: true },
      { name: '<a:cpu_emoji:1366067507823120404> –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:', value: `\`${cpuLoad}%\``, inline: true },
      { name: '<:memory_emoji:1366067724052336680> –ü–∞–º—è—Ç—å:', value: `\`${usedMemMB}MB / ${totalMemMB}MB (${memoryUsage}%)\``, inline: true },
    )
    .setImage(images.statusCommandGif)
    .setFooter({ text: `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω: ${new Date().toLocaleString('ru-RU')}` });

  await interaction.reply({ embeds: [statusEmbed] });
}

function formatUptime(seconds) {
  const d = Math.floor(seconds / (3600 * 24));
  const h = Math.floor((seconds % (3600 * 24)) / 3600);
  const m = Math.floor((seconds % 3600) / 60);
  const s = Math.floor(seconds % 60);
  return `${d}–¥ ${h}—á ${m}–º ${s}—Å`;
}

// ===== Spam Command =====
const activeSpams = new Map();

const spamData = {
  name: '—Å–ø–∞–º',
  description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å —á–∞—Ç –≤–Ω–∏–∑ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)',
  options: [
    { name: '–≤—Ä–µ–º—è', description: '–í—Ä–µ–º—è —Å–ø–∞–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10s, 2m, 1h)', type: 3, required: false },
    { name: '—Å—Ç–æ–ø', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º', type: 5, required: false },
  ],
};

function hasAdminRole(member) {
  return member.permissions.has('Administrator');
}

async function executeSpam(interaction, client) {
  if (!hasAdminRole(interaction.member)) {
    return interaction.reply({ content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
  }

  const timeArg = interaction.options.getString('–≤—Ä–µ–º—è');
  const stop = interaction.options.getBoolean('—Å—Ç–æ–ø');
  const channel = interaction.channel;

  if (stop) {
    const spam = activeSpams.get(channel.id);
    if (spam) {
      clearInterval(spam.interval);
      activeSpams.delete(channel.id);
      return interaction.reply('üõë –°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.');
    } else {
      return interaction.reply('‚ÑπÔ∏è –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∞–º–∞.');
    }
  }

  if (!timeArg) {
    return interaction.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/—Å–ø–∞–º –≤—Ä–µ–º—è:<–≤—Ä–µ–º—è>` –∏–ª–∏ `/—Å–ø–∞–º —Å—Ç–æ–ø:true`');
  }

  const duration = ms(timeArg);
  if (!duration || duration < 1000) {
    return interaction.reply('‚è± –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10s, 2m, 1h).');
  }

  console.log(`[ADMIN] ${interaction.user.tag} –∑–∞–ø—É—Å—Ç–∏–ª —Å–ø–∞–º –≤ –∫–∞–Ω–∞–ª–µ #${channel.name} –Ω–∞ ${ms(duration, { long: true })}`);

  if (activeSpams.has(channel.id)) {
    return interaction.reply('‚ö†Ô∏è –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –∏–¥—ë—Ç —Å–ø–∞–º. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `/—Å–ø–∞–º —Å—Ç–æ–ø:true`.');
  }

  await interaction.reply(`‚úÖ –°–ø–∞–º –Ω–∞—á–∞—Ç –Ω–∞ ${ms(duration, { long: true })}`);

  const interval = setInterval(() => {
    const embed = new EmbedBuilder()
      .setColor('#1D1D1E')
      .setDescription('‚¨áÔ∏è *–ü—Ä–æ–¥–≤–∏–≥–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑...*')
      .setFooter({ text: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∞–º', iconURL: client.user.displayAvatarURL() });
    channel.send({ embeds: [embed] });
  }, 1000);

  activeSpams.set(channel.id, { interval });

  setTimeout(() => {
    clearInterval(interval);
    activeSpams.delete(channel.id);
    channel.send('üõë –°–ø–∞–º –∑–∞–≤–µ—Ä—à—ë–Ω.');
  }, duration);
}

module.exports = {
  commands: [
    { data: embedData, execute: executeEmbed },
    { data: statusData, execute: executeStatus },
    { data: spamData, execute: executeSpam }
  ]
};